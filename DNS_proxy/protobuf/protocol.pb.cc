// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dns_proxy {

namespace {

const ::google::protobuf::Descriptor* ipv4_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv4_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* ipv6_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ipv6_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* dns_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dns_record_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ipv4_t_descriptor_ = file->message_type(0);
  static const int ipv4_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_t, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_t, ipv4_),
  };
  ipv4_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv4_t_descriptor_,
      ipv4_t::default_instance_,
      ipv4_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv4_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv4_t));
  ipv6_t_descriptor_ = file->message_type(1);
  static const int ipv6_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv6_t, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv6_t, ipv6str_),
  };
  ipv6_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ipv6_t_descriptor_,
      ipv6_t::default_instance_,
      ipv6_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv6_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ipv6_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ipv6_t));
  dns_record_descriptor_ = file->message_type(2);
  static const int dns_record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_record, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_record, ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_record, ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_record, alias_),
  };
  dns_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dns_record_descriptor_,
      dns_record::default_instance_,
      dns_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dns_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dns_record));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv4_t_descriptor_, &ipv4_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ipv6_t_descriptor_, &ipv6_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dns_record_descriptor_, &dns_record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete ipv4_t::default_instance_;
  delete ipv4_t_reflection_;
  delete ipv6_t::default_instance_;
  delete ipv6_t_reflection_;
  delete dns_record::default_instance_;
  delete dns_record_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\tdns_proxy\"(\n\006ipv4_t\022\020\n"
    "\005index\030\002 \002(\r:\0010\022\014\n\004ipv4\030\003 \003(\t\"+\n\006ipv6_t\022"
    "\020\n\005index\030\002 \002(\r:\0010\022\017\n\007ipv6str\030\003 \003(\t\"v\n\ndn"
    "s_record\022\027\n\004host\030\001 \002(\t:\tlocalhost\022\037\n\004ipv"
    "4\030\002 \002(\0132\021.dns_proxy.ipv4_t\022\037\n\004ipv6\030\003 \003(\013"
    "2\021.dns_proxy.ipv6_t\022\r\n\005alias\030\004 \003(\t", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ipv4_t::default_instance_ = new ipv4_t();
  ipv6_t::default_instance_ = new ipv6_t();
  dns_record::default_instance_ = new dns_record();
  ipv4_t::default_instance_->InitAsDefaultInstance();
  ipv6_t::default_instance_->InitAsDefaultInstance();
  dns_record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ipv4_t::kIndexFieldNumber;
const int ipv4_t::kIpv4FieldNumber;
#endif  // !_MSC_VER

ipv4_t::ipv4_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv4_t::InitAsDefaultInstance() {
}

ipv4_t::ipv4_t(const ipv4_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv4_t::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv4_t::~ipv4_t() {
  SharedDtor();
}

void ipv4_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ipv4_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv4_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv4_t_descriptor_;
}

const ipv4_t& ipv4_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

ipv4_t* ipv4_t::default_instance_ = NULL;

ipv4_t* ipv4_t::New() const {
  return new ipv4_t;
}

void ipv4_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ipv4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv4_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv4;
        break;
      }
      
      // repeated string ipv4 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv4(0).data(), this->ipv4(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv4;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv4_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 2 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }
  
  // repeated string ipv4 = 3;
  for (int i = 0; i < this->ipv4_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv4(i).data(), this->ipv4(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ipv4(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv4_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 2 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }
  
  // repeated string ipv4 = 3;
  for (int i = 0; i < this->ipv4_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv4(i).data(), this->ipv4(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ipv4(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv4_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 2 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated string ipv4 = 3;
  total_size += 1 * this->ipv4_size();
  for (int i = 0; i < this->ipv4_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv4(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv4_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv4_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv4_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv4_t::MergeFrom(const ipv4_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv4_.MergeFrom(from.ipv4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv4_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv4_t::CopyFrom(const ipv4_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv4_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ipv4_t::Swap(ipv4_t* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    ipv4_.Swap(&other->ipv4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv4_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv4_t_descriptor_;
  metadata.reflection = ipv4_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ipv6_t::kIndexFieldNumber;
const int ipv6_t::kIpv6StrFieldNumber;
#endif  // !_MSC_VER

ipv6_t::ipv6_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ipv6_t::InitAsDefaultInstance() {
}

ipv6_t::ipv6_t(const ipv6_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ipv6_t::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ipv6_t::~ipv6_t() {
  SharedDtor();
}

void ipv6_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ipv6_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ipv6_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ipv6_t_descriptor_;
}

const ipv6_t& ipv6_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

ipv6_t* ipv6_t::default_instance_ = NULL;

ipv6_t* ipv6_t::New() const {
  return new ipv6_t;
}

void ipv6_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ipv6str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ipv6_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv6str;
        break;
      }
      
      // repeated string ipv6str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ipv6str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipv6str(0).data(), this->ipv6str(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv6str;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ipv6_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 2 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }
  
  // repeated string ipv6str = 3;
  for (int i = 0; i < this->ipv6str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ipv6str(i).data(), this->ipv6str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ipv6str(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ipv6_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 2 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }
  
  // repeated string ipv6str = 3;
  for (int i = 0; i < this->ipv6str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipv6str(i).data(), this->ipv6str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ipv6str(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ipv6_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 2 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated string ipv6str = 3;
  total_size += 1 * this->ipv6str_size();
  for (int i = 0; i < this->ipv6str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ipv6str(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ipv6_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ipv6_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ipv6_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ipv6_t::MergeFrom(const ipv6_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv6str_.MergeFrom(from.ipv6str_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ipv6_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ipv6_t::CopyFrom(const ipv6_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ipv6_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ipv6_t::Swap(ipv6_t* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    ipv6str_.Swap(&other->ipv6str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ipv6_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ipv6_t_descriptor_;
  metadata.reflection = ipv6_t_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string dns_record::_default_host_("localhost");
#ifndef _MSC_VER
const int dns_record::kHostFieldNumber;
const int dns_record::kIpv4FieldNumber;
const int dns_record::kIpv6FieldNumber;
const int dns_record::kAliasFieldNumber;
#endif  // !_MSC_VER

dns_record::dns_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dns_record::InitAsDefaultInstance() {
  ipv4_ = const_cast< ::dns_proxy::ipv4_t*>(&::dns_proxy::ipv4_t::default_instance());
}

dns_record::dns_record(const dns_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dns_record::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  ipv4_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dns_record::~dns_record() {
  SharedDtor();
}

void dns_record::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (this != default_instance_) {
    delete ipv4_;
  }
}

void dns_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dns_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dns_record_descriptor_;
}

const dns_record& dns_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

dns_record* dns_record::default_instance_ = NULL;

dns_record* dns_record::New() const {
  return new dns_record;
}

void dns_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (has_ipv4()) {
      if (ipv4_ != NULL) ipv4_->::dns_proxy::ipv4_t::Clear();
    }
  }
  ipv6_.Clear();
  alias_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dns_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipv4;
        break;
      }
      
      // required .dns_proxy.ipv4_t ipv4 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipv4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv6;
        break;
      }
      
      // repeated .dns_proxy.ipv6_t ipv6 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipv6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv6;
        if (input->ExpectTag(34)) goto parse_alias;
        break;
      }
      
      // repeated string alias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias(0).data(), this->alias(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alias;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dns_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required .dns_proxy.ipv4_t ipv4 = 2;
  if (has_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ipv4(), output);
  }
  
  // repeated .dns_proxy.ipv6_t ipv6 = 3;
  for (int i = 0; i < this->ipv6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ipv6(i), output);
  }
  
  // repeated string alias = 4;
  for (int i = 0; i < this->alias_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->alias(i).data(), this->alias(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alias(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dns_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required .dns_proxy.ipv4_t ipv4 = 2;
  if (has_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ipv4(), target);
  }
  
  // repeated .dns_proxy.ipv6_t ipv6 = 3;
  for (int i = 0; i < this->ipv6_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ipv6(i), target);
  }
  
  // repeated string alias = 4;
  for (int i = 0; i < this->alias_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias(i).data(), this->alias(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->alias(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dns_record::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required .dns_proxy.ipv4_t ipv4 = 2;
    if (has_ipv4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipv4());
    }
    
  }
  // repeated .dns_proxy.ipv6_t ipv6 = 3;
  total_size += 1 * this->ipv6_size();
  for (int i = 0; i < this->ipv6_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipv6(i));
  }
  
  // repeated string alias = 4;
  total_size += 1 * this->alias_size();
  for (int i = 0; i < this->alias_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alias(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dns_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dns_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dns_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dns_record::MergeFrom(const dns_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipv6_.MergeFrom(from.ipv6_);
  alias_.MergeFrom(from.alias_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_ipv4()) {
      mutable_ipv4()->::dns_proxy::ipv4_t::MergeFrom(from.ipv4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dns_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dns_record::CopyFrom(const dns_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dns_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_ipv4()) {
    if (!this->ipv4().IsInitialized()) return false;
  }
  for (int i = 0; i < ipv6_size(); i++) {
    if (!this->ipv6(i).IsInitialized()) return false;
  }
  return true;
}

void dns_record::Swap(dns_record* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(ipv4_, other->ipv4_);
    ipv6_.Swap(&other->ipv6_);
    alias_.Swap(&other->alias_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dns_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dns_record_descriptor_;
  metadata.reflection = dns_record_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dns_proxy

// @@protoc_insertion_point(global_scope)
