// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dns_proxy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class ipv4_t;
class ipv6_t;
class dns_record;

// ===================================================================

class ipv4_t : public ::google::protobuf::Message {
 public:
  ipv4_t();
  virtual ~ipv4_t();
  
  ipv4_t(const ipv4_t& from);
  
  inline ipv4_t& operator=(const ipv4_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv4_t& default_instance();
  
  void Swap(ipv4_t* other);
  
  // implements Message ----------------------------------------------
  
  ipv4_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ipv4_t& from);
  void MergeFrom(const ipv4_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 2 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // repeated string ipv4 = 3;
  inline int ipv4_size() const;
  inline void clear_ipv4();
  static const int kIpv4FieldNumber = 3;
  inline const ::std::string& ipv4(int index) const;
  inline ::std::string* mutable_ipv4(int index);
  inline void set_ipv4(int index, const ::std::string& value);
  inline void set_ipv4(int index, const char* value);
  inline void set_ipv4(int index, const char* value, size_t size);
  inline ::std::string* add_ipv4();
  inline void add_ipv4(const ::std::string& value);
  inline void add_ipv4(const char* value);
  inline void add_ipv4(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ipv4() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ipv4();
  
  // @@protoc_insertion_point(class_scope:dns_proxy.ipv4_t)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> ipv4_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static ipv4_t* default_instance_;
};
// -------------------------------------------------------------------

class ipv6_t : public ::google::protobuf::Message {
 public:
  ipv6_t();
  virtual ~ipv6_t();
  
  ipv6_t(const ipv6_t& from);
  
  inline ipv6_t& operator=(const ipv6_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipv6_t& default_instance();
  
  void Swap(ipv6_t* other);
  
  // implements Message ----------------------------------------------
  
  ipv6_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ipv6_t& from);
  void MergeFrom(const ipv6_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 2 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // repeated string ipv6str = 3;
  inline int ipv6str_size() const;
  inline void clear_ipv6str();
  static const int kIpv6StrFieldNumber = 3;
  inline const ::std::string& ipv6str(int index) const;
  inline ::std::string* mutable_ipv6str(int index);
  inline void set_ipv6str(int index, const ::std::string& value);
  inline void set_ipv6str(int index, const char* value);
  inline void set_ipv6str(int index, const char* value, size_t size);
  inline ::std::string* add_ipv6str();
  inline void add_ipv6str(const ::std::string& value);
  inline void add_ipv6str(const char* value);
  inline void add_ipv6str(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ipv6str() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ipv6str();
  
  // @@protoc_insertion_point(class_scope:dns_proxy.ipv6_t)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> ipv6str_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static ipv6_t* default_instance_;
};
// -------------------------------------------------------------------

class dns_record : public ::google::protobuf::Message {
 public:
  dns_record();
  virtual ~dns_record();
  
  dns_record(const dns_record& from);
  
  inline dns_record& operator=(const dns_record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const dns_record& default_instance();
  
  void Swap(dns_record* other);
  
  // implements Message ----------------------------------------------
  
  dns_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dns_record& from);
  void MergeFrom(const dns_record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // required .dns_proxy.ipv4_t ipv4 = 2;
  inline bool has_ipv4() const;
  inline void clear_ipv4();
  static const int kIpv4FieldNumber = 2;
  inline const ::dns_proxy::ipv4_t& ipv4() const;
  inline ::dns_proxy::ipv4_t* mutable_ipv4();
  inline ::dns_proxy::ipv4_t* release_ipv4();
  
  // repeated .dns_proxy.ipv6_t ipv6 = 3;
  inline int ipv6_size() const;
  inline void clear_ipv6();
  static const int kIpv6FieldNumber = 3;
  inline const ::dns_proxy::ipv6_t& ipv6(int index) const;
  inline ::dns_proxy::ipv6_t* mutable_ipv6(int index);
  inline ::dns_proxy::ipv6_t* add_ipv6();
  inline const ::google::protobuf::RepeatedPtrField< ::dns_proxy::ipv6_t >&
      ipv6() const;
  inline ::google::protobuf::RepeatedPtrField< ::dns_proxy::ipv6_t >*
      mutable_ipv6();
  
  // repeated string alias = 4;
  inline int alias_size() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 4;
  inline const ::std::string& alias(int index) const;
  inline ::std::string* mutable_alias(int index);
  inline void set_alias(int index, const ::std::string& value);
  inline void set_alias(int index, const char* value);
  inline void set_alias(int index, const char* value, size_t size);
  inline ::std::string* add_alias();
  inline void add_alias(const ::std::string& value);
  inline void add_alias(const char* value);
  inline void add_alias(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& alias() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alias();
  
  // @@protoc_insertion_point(class_scope:dns_proxy.dns_record)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_ipv4();
  inline void clear_has_ipv4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::dns_proxy::ipv4_t* ipv4_;
  ::google::protobuf::RepeatedPtrField< ::dns_proxy::ipv6_t > ipv6_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alias_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  void InitAsDefaultInstance();
  static dns_record* default_instance_;
};
// ===================================================================


// ===================================================================

// ipv4_t

// required uint32 index = 2 [default = 0];
inline bool ipv4_t::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ipv4_t::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ipv4_t::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ipv4_t::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ipv4_t::index() const {
  return index_;
}
inline void ipv4_t::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated string ipv4 = 3;
inline int ipv4_t::ipv4_size() const {
  return ipv4_.size();
}
inline void ipv4_t::clear_ipv4() {
  ipv4_.Clear();
}
inline const ::std::string& ipv4_t::ipv4(int index) const {
  return ipv4_.Get(index);
}
inline ::std::string* ipv4_t::mutable_ipv4(int index) {
  return ipv4_.Mutable(index);
}
inline void ipv4_t::set_ipv4(int index, const ::std::string& value) {
  ipv4_.Mutable(index)->assign(value);
}
inline void ipv4_t::set_ipv4(int index, const char* value) {
  ipv4_.Mutable(index)->assign(value);
}
inline void ipv4_t::set_ipv4(int index, const char* value, size_t size) {
  ipv4_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ipv4_t::add_ipv4() {
  return ipv4_.Add();
}
inline void ipv4_t::add_ipv4(const ::std::string& value) {
  ipv4_.Add()->assign(value);
}
inline void ipv4_t::add_ipv4(const char* value) {
  ipv4_.Add()->assign(value);
}
inline void ipv4_t::add_ipv4(const char* value, size_t size) {
  ipv4_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ipv4_t::ipv4() const {
  return ipv4_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ipv4_t::mutable_ipv4() {
  return &ipv4_;
}

// -------------------------------------------------------------------

// ipv6_t

// required uint32 index = 2 [default = 0];
inline bool ipv6_t::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ipv6_t::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ipv6_t::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ipv6_t::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ipv6_t::index() const {
  return index_;
}
inline void ipv6_t::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated string ipv6str = 3;
inline int ipv6_t::ipv6str_size() const {
  return ipv6str_.size();
}
inline void ipv6_t::clear_ipv6str() {
  ipv6str_.Clear();
}
inline const ::std::string& ipv6_t::ipv6str(int index) const {
  return ipv6str_.Get(index);
}
inline ::std::string* ipv6_t::mutable_ipv6str(int index) {
  return ipv6str_.Mutable(index);
}
inline void ipv6_t::set_ipv6str(int index, const ::std::string& value) {
  ipv6str_.Mutable(index)->assign(value);
}
inline void ipv6_t::set_ipv6str(int index, const char* value) {
  ipv6str_.Mutable(index)->assign(value);
}
inline void ipv6_t::set_ipv6str(int index, const char* value, size_t size) {
  ipv6str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ipv6_t::add_ipv6str() {
  return ipv6str_.Add();
}
inline void ipv6_t::add_ipv6str(const ::std::string& value) {
  ipv6str_.Add()->assign(value);
}
inline void ipv6_t::add_ipv6str(const char* value) {
  ipv6str_.Add()->assign(value);
}
inline void ipv6_t::add_ipv6str(const char* value, size_t size) {
  ipv6str_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ipv6_t::ipv6str() const {
  return ipv6str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ipv6_t::mutable_ipv6str() {
  return &ipv6str_;
}

// -------------------------------------------------------------------

// dns_record

// required string host = 1 [default = "localhost"];
inline bool dns_record::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dns_record::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dns_record::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dns_record::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  clear_has_host();
}
inline const ::std::string& dns_record::host() const {
  return *host_;
}
inline void dns_record::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void dns_record::set_host(const char* value) {
  set_has_host();
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void dns_record::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dns_record::mutable_host() {
  set_has_host();
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}
inline ::std::string* dns_record::release_host() {
  clear_has_host();
  if (host_ == &_default_host_) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&_default_host_);
    return temp;
  }
}

// required .dns_proxy.ipv4_t ipv4 = 2;
inline bool dns_record::has_ipv4() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dns_record::set_has_ipv4() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dns_record::clear_has_ipv4() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dns_record::clear_ipv4() {
  if (ipv4_ != NULL) ipv4_->::dns_proxy::ipv4_t::Clear();
  clear_has_ipv4();
}
inline const ::dns_proxy::ipv4_t& dns_record::ipv4() const {
  return ipv4_ != NULL ? *ipv4_ : *default_instance_->ipv4_;
}
inline ::dns_proxy::ipv4_t* dns_record::mutable_ipv4() {
  set_has_ipv4();
  if (ipv4_ == NULL) ipv4_ = new ::dns_proxy::ipv4_t;
  return ipv4_;
}
inline ::dns_proxy::ipv4_t* dns_record::release_ipv4() {
  clear_has_ipv4();
  ::dns_proxy::ipv4_t* temp = ipv4_;
  ipv4_ = NULL;
  return temp;
}

// repeated .dns_proxy.ipv6_t ipv6 = 3;
inline int dns_record::ipv6_size() const {
  return ipv6_.size();
}
inline void dns_record::clear_ipv6() {
  ipv6_.Clear();
}
inline const ::dns_proxy::ipv6_t& dns_record::ipv6(int index) const {
  return ipv6_.Get(index);
}
inline ::dns_proxy::ipv6_t* dns_record::mutable_ipv6(int index) {
  return ipv6_.Mutable(index);
}
inline ::dns_proxy::ipv6_t* dns_record::add_ipv6() {
  return ipv6_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dns_proxy::ipv6_t >&
dns_record::ipv6() const {
  return ipv6_;
}
inline ::google::protobuf::RepeatedPtrField< ::dns_proxy::ipv6_t >*
dns_record::mutable_ipv6() {
  return &ipv6_;
}

// repeated string alias = 4;
inline int dns_record::alias_size() const {
  return alias_.size();
}
inline void dns_record::clear_alias() {
  alias_.Clear();
}
inline const ::std::string& dns_record::alias(int index) const {
  return alias_.Get(index);
}
inline ::std::string* dns_record::mutable_alias(int index) {
  return alias_.Mutable(index);
}
inline void dns_record::set_alias(int index, const ::std::string& value) {
  alias_.Mutable(index)->assign(value);
}
inline void dns_record::set_alias(int index, const char* value) {
  alias_.Mutable(index)->assign(value);
}
inline void dns_record::set_alias(int index, const char* value, size_t size) {
  alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dns_record::add_alias() {
  return alias_.Add();
}
inline void dns_record::add_alias(const ::std::string& value) {
  alias_.Add()->assign(value);
}
inline void dns_record::add_alias(const char* value) {
  alias_.Add()->assign(value);
}
inline void dns_record::add_alias(const char* value, size_t size) {
  alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
dns_record::alias() const {
  return alias_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
dns_record::mutable_alias() {
  return &alias_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dns_proxy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
